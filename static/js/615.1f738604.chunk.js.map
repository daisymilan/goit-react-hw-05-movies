{"version":3,"file":"static/js/615.1f738604.chunk.js","mappings":"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","sources":["api/api.js","webpack://goit-react-hw-05-movies/./src/components/MovieList/MovieList.module.css?6db5","webpack://goit-react-hw-05-movies/./src/components/MovieListItem/MovieListItem.module.css?83b7","components/MovieListItem/MovieListItem.jsx","components/MovieList/MovieList.jsx","webpack://goit-react-hw-05-movies/./src/pages/Movies/MoviesPage.module.css?251f","pages/Movies/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'b86981a07e5296001ff10a61d56b5942';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get('trending/movie/day');\n  return response.data.results;\n};\n\nexport const fetchMovieByQuery = async (movieName) => {\n  const response = await axios.get(`search/movie?query=${movieName}`);\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async (movieId) => {\n  const response = await axios.get(`movie/${movieId}`);\n  return response.data;\n};\n\nexport const fetchMovieCast = async (movieId) => {\n  const response = await axios.get(`movie/${movieId}/credits`);\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async (movieId) => {\n  const response = await axios.get(`movie/${movieId}/reviews`);\n  return response.data.results;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"movieListContainer\":\"MovieList_movieListContainer__Rv+1M\",\"movieList\":\"MovieList_movieList__uFrOZ\",\"movieItem\":\"MovieList_movieItem__qe2ZM\",\"movieImage\":\"MovieList_movieImage__txbdB\",\"movieTitle\":\"MovieList_movieTitle__RhENm\"};","// extracted by mini-css-extract-plugin\nexport default {\"movieItem\":\"MovieListItem_movieItem__mZL09\",\"movieImage\":\"MovieListItem_movieImage__CGbex\",\"movieTitle\":\"MovieListItem_movieTitle__qARPK\"};","import PropTypes from 'prop-types';\nimport css from './MovieListItem.module.css';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const MovieListItem = ({ id, title, posterPath }) => {\n  const location = useLocation();\n\n  return (\n    <li className={css.movieItem}>\n      <Link\n        to={`/movies/${id}`}\n        state={{ from: location, movieTitle: title }}\n        className={css.movieLink}\n      >\n        <img\n          src={`https://image.tmdb.org/t/p/w300${posterPath}`} \n          alt={title}\n          className={css.movieImage}\n        />\n        <h3 className={css.movieTitle}>{title}</h3>\n      </Link>\n    </li>\n  );\n};\n\nMovieListItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  posterPath: PropTypes.string, \n};\n","import PropTypes from 'prop-types';\nimport css from './MovieList.module.css';\nimport { MovieListItem } from 'components/MovieListItem/MovieListItem';\n\nexport const MovieList = ({ movies }) => {\n  return (\n    <div className={css.movieListContainer}>\n      <ul className={css.movieList}>\n        {movies.map(({ id, title, poster_path }) => (\n          <MovieListItem\n            key={id}\n            id={id}\n            title={title}\n            posterPath={poster_path}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string, \n    })\n  ).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"inputWrapper\":\"MoviesPage_inputWrapper__RY+g5\",\"input\":\"MoviesPage_input__tXUWp\",\"buttonWrapper\":\"MoviesPage_buttonWrapper__TG4Fw\"};","import { useEffect, useState } from 'react';\nimport { fetchMovieByQuery } from 'api/api';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { Outlet, useSearchParams } from 'react-router-dom';\nimport css from './MoviesPage.module.css';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query') ?? 'Marvel'; \n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      if (!movieName.trim()) return;\n      setIsLoading(true);\n\n      try {\n        const movies = await fetchMovieByQuery(movieName);\n        setMovies(movies);\n        setIsLoading(false);\n      } catch (error) {\n        console.error(error);\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovies();\n  }, [movieName]);\n\n  return (\n    <div>\n      <div className={css.inputWrapper}>\n        <input\n          type=\"text\"\n          className={css.input}\n          onChange={e => updateQueryString(e.target.value)}\n          placeholder=\"Search movies...\"\n        />\n      </div>\n      {isLoading ? (\n        <p style={{ textAlign: 'center' }}>Loading...</p>\n      ) : (\n        <MovieList movies={movies} />\n      )}\n      <Outlet />\n    </div>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["axios","api_key","fetchTrendingMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","sent","abrupt","data","results","stop","apply","arguments","fetchMovieByQuery","_ref2","_callee2","movieName","_context2","concat","_x","fetchMovieDetails","_ref3","_callee3","movieId","_context3","_x2","fetchMovieCast","_ref4","_callee4","_context4","cast","_x3","fetchMovieReviews","_ref5","_callee5","_context5","_x4","MovieListItem","id","title","posterPath","location","useLocation","_jsx","className","css","children","_jsxs","Link","to","state","from","movieTitle","src","alt","MovieList","movies","map","poster_path","_searchParams$get","_useState","useState","_useState2","_slicedToArray","setMovies","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","get","_useState3","_useState4","isLoading","setIsLoading","useEffect","fetchMovies","_movies","trim","t0","console","error","type","onChange","e","query","target","value","placeholder","style","textAlign","Outlet"],"sourceRoot":""}